// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Perfil {
  id             String           @id @default(uuid())
  nome           String
  cpf            String           @unique
  dataNascimento String
  email          String           @unique
  senha          String
  termos         Boolean
  primeiroAcesso Boolean //True="Usuário ainda não criado"  False="Usuário criado"
  UsuarioHost    UsuarioHost[]
  UsuarioDefault UsuarioDefault[]
  createAt       DateTime         @default(now())
  updateAt       DateTime?

  @@map("perfil")
}

model UsuarioHost {
  id                String              @id @default(uuid())
  nome              String
  autorizacao       String
  perfilId          String
  perfil            Perfil              @relation(fields: [perfilId], references: [id], onDelete: Cascade)
  ativo             Boolean?            @default(true)
  Equipe            Equipe[]
  RlTagsUsuarioHost RlTagsUsuarioHost[]
  EscalaUsuarioHost EscalaUsuarioHost[]
  createAt          DateTime            @default(now())
  updateAt          DateTime?

  @@map("usuarioHost")
}

model UsuarioDefault {
  id                   String                 @id @default(uuid())
  nome                 String
  autorizacao          String?
  equipeId             String?
  equipe               Equipe?                @relation(fields: [equipeId], references: [id], onDelete: Cascade)
  perfilId             String
  perfil               Perfil                 @relation(fields: [perfilId], references: [id], onDelete: Cascade)
  ativo                Boolean?               @default(true)
  RlTagsUsuarioDefault RlTagsUsuarioDefault[]
  EscalaUsuarioDefault EscalaUsuarioDefault[]
  RlSolicitacao        RlSolicitacao[]
  createAt             DateTime               @default(now())
  updateAt             DateTime?

  @@map("usuarioDefault")
}

model EscalaUsuarioHost {
  id                    String      @id @default(uuid())
  servicos              Json?
  disponibilidade       Json?
  backupDisponibilidade Json?
  usuarioHostId         String
  usuarioHost           UsuarioHost @relation(fields: [usuarioHostId], references: [id], onDelete: Cascade)
  createAt              DateTime    @default(now())
  updateAt              DateTime?

  @@map("escalaUsuarioHost")
}

model EscalaUsuarioDefault {
  id                    String         @id @default(uuid())
  servicos              Json?
  disponibilidade       Json?
  backupDisponibilidade Json?
  usuarioDefaultId      String
  usuarioDefault        UsuarioDefault @relation(fields: [usuarioDefaultId], references: [id], onDelete: Cascade)
  createAt              DateTime       @default(now())
  updateAt              DateTime?

  @@map("escalaUsuarioDefault")
}

model Equipe {
  id             String           @id @default(uuid())
  nome           String
  descricao      String
  usuarioHostId  String
  escalaMensal   Json?
  usuarioHost    UsuarioHost      @relation(fields: [usuarioHostId], references: [id], onDelete: Cascade)
  Tags           Tags[]
  Programacao    Programacao[]
  UsuarioDefault UsuarioDefault[]
  RlSolicitacao  RlSolicitacao[]
  createAt       DateTime         @default(now())
  updateAt       DateTime?

  @@map("equipe")
}

model Tags {
  id                   String                 @id @default(uuid())
  nome                 String
  equipeId             String
  equipe               Equipe                 @relation(fields: [equipeId], references: [id], onDelete: Cascade)
  RlTagsUsuarioHost    RlTagsUsuarioHost[]
  RlTagsUsuarioDefault RlTagsUsuarioDefault[]
  RlTagsProgramacao    RlTagsProgramacao[]
  createAt             DateTime               @default(now())
  updateAt             DateTime?

  @@map("tags")
}

model Programacao {
  id                String              @id @default(uuid())
  culto             String
  dia               String
  horario           String
  servindo          Int
  equipeId          String
  equipe            Equipe              @relation(fields: [equipeId], references: [id], onDelete: Cascade)
  RlTagsProgramacao RlTagsProgramacao[]
  createAt          DateTime            @default(now())
  updateAt          DateTime?

  @@map("programacao")
}

model RlTagsProgramacao {
  id            String      @id @default(uuid())
  programacaoId String
  Programacao   Programacao @relation(fields: [programacaoId], references: [id], onDelete: Cascade)
  tagId         String
  tags          Tags        @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createAt      DateTime    @default(now())
  updateAt      DateTime?

  @@map("rlTagsProgramacao")
}

model RlTagsUsuarioHost {
  id            String      @id @default(uuid())
  usuarioHostId String
  usuarioHost   UsuarioHost @relation(fields: [usuarioHostId], references: [id], onDelete: Cascade)
  tagId         String
  tags          Tags        @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createAt      DateTime    @default(now())
  updateAt      DateTime?

  @@map("rlTagsUsuarioHost")
}

model RlTagsUsuarioDefault {
  id               String         @id @default(uuid())
  usuarioDefaultId String
  usuarioDefault   UsuarioDefault @relation(fields: [usuarioDefaultId], references: [id], onDelete: Cascade)
  tagId            String
  tags             Tags           @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createAt         DateTime       @default(now())
  updateAt         DateTime?

  @@map("rlTagsUsuarioDefault")
}

model RlSolicitacao {
  id               String         @id @default(uuid())
  usuarioDefaultId String
  usuarioDefault   UsuarioDefault @relation(fields: [usuarioDefaultId], references: [id], onDelete: Cascade)
  equipeId         String
  equipe           Equipe         @relation(fields: [equipeId], references: [id], onDelete: Cascade)
  createAt         DateTime       @default(now())
  updateAt         DateTime?

  @@map("rlSolicitacao")
}
