// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Perfil {
  id             String     @id @default(uuid())
  foto           String?
  nome           String
  cpf            String     @unique
  dataNascimento String
  email          String     @unique
  senha          String
  termos         Boolean
  primeiroAcesso Boolean //True="Usuário ainda não criado"  False="Usuário criado"
  Usuarios       Usuarios[]
  createAt       DateTime   @default(now())
  updateAt       DateTime?

  @@map("perfil")
}

model Usuarios {
  id                        String           @id @default(uuid())
  nome                      String
  foto                      String?
  autorizacao               String?
  incluirUsuarioGerarEscala Boolean?         @default(true)
  statusUsuario             Boolean?         @default(true)
  perfilId                  String
  perfil                    Perfil           @relation(fields: [perfilId], references: [id], onDelete: Cascade)
  equipeId                  String?
  equipe                    Equipe?          @relation(fields: [equipeId], references: [id], onDelete: Cascade)
  RlTagsUsuarios            RlTagsUsuarios[]
  EscalaUsuarios            EscalaUsuarios[]
  RlSolicitacoes            RlSolicitacoes[]
  createAt                  DateTime         @default(now())
  updateAt                  DateTime?

  @@map("usuarios")
}

model EscalaUsuarios {
  id                        String    @id @default(uuid())
  disponibilidadeProximoMes Json?
  disponibilidadeMensal     Json?
  usuarioId                 String
  usuarios                  Usuarios  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  createAt                  DateTime  @default(now())
  updateAt                  DateTime?

  @@map("escalaUsuarios")
}

model Equipe {
  id                  String           @id @default(uuid())
  nome                String
  descricao           String
  usuarioHostId       String
  escalaMensal        Json?
  proximaEscalaMensal Json?
  Tags                Tags[]
  Programacoes        Programacoes[]
  Usuarios            Usuarios[]
  RlSolicitacoes      RlSolicitacoes[]
  createAt            DateTime         @default(now())
  updateAt            DateTime?

  @@map("equipe")
}

model Tags {
  id                 String               @id @default(uuid())
  nome               String
  equipeId           String
  equipe             Equipe               @relation(fields: [equipeId], references: [id], onDelete: Cascade)
  RlTagsUsuarios     RlTagsUsuarios[]
  RlTagsProgramacoes RlTagsProgramacoes[]
  createAt           DateTime             @default(now())
  updateAt           DateTime?

  @@map("tags")
}

model Programacoes {
  id                 String               @id @default(uuid())
  culto              String
  dia                String
  horario            String
  servindo           Int
  equipeId           String
  equipe             Equipe               @relation(fields: [equipeId], references: [id], onDelete: Cascade)
  RlTagsProgramacoes RlTagsProgramacoes[]
  createAt           DateTime             @default(now())
  updateAt           DateTime?

  @@map("programacoes")
}

model RlTagsProgramacoes {
  id            String       @id @default(uuid())
  programacaoId String
  Programacoes  Programacoes @relation(fields: [programacaoId], references: [id], onDelete: Cascade)
  tagId         String
  tags          Tags         @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createAt      DateTime     @default(now())
  updateAt      DateTime?

  @@map("rlTagsProgramacoes")
}

model RlTagsUsuarios {
  id        String    @id @default(uuid())
  usuarioId String
  usuarios  Usuarios  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  tagId     String
  tags      Tags      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createAt  DateTime  @default(now())
  updateAt  DateTime?

  @@map("rlTagsUsuarios")
}

model RlSolicitacoes {
  id        String    @id @default(uuid())
  usuarioId String
  usuarios  Usuarios  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  equipeId  String
  equipe    Equipe    @relation(fields: [equipeId], references: [id], onDelete: Cascade)
  createAt  DateTime  @default(now())
  updateAt  DateTime?

  @@map("rlSolicitacoes")
}
